import logging
import asyncio
import os
import tempfile
from datetime import datetime, timedelta
from typing import List, Dict, Set
from collections import defaultdict
import pytz

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram import types, Dispatcher

from storage import ScreenshotStorage
from config import SHEET_URL
from utils import take_screenshot, screenshot_stats
from image_processor import ImageProcessor

# Initialize storage and state variables
screenshot_storage = ScreenshotStorage()
temp_files: Dict[str, str] = {}  # Map of file_id to filepath
selected_screenshots: Dict[str, Set[str]] = defaultdict(set)  # Map of user_key to set of selected filenames

# Configure logging
logger = logging.getLogger(__name__)

logger = logging.getLogger(__name__)

def log_action(action: str, details: str = None):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
    log_message = f"Action: {action}"
    if details:
        log_message += f" | Details: {details}"
    logger.info(log_message)

router = Router()

def register_handlers(dp: Dispatcher):
    """Register all handlers"""
    try:
        dp.include_router(router)
        logger.info("All handlers registered successfully")
    except Exception as e:
        logger.error(f"Error registering handlers: {e}", exc_info=True)
        raise

async def animated_progress_bar(message: Message, total_steps: int = 5) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–º–æ–¥–∑–∏
    """
    progress_symbols = ["‚¨úÔ∏è"] * total_steps
    loading_emojis = ["‚è≥", "‚åõÔ∏è"]  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏

    for step in range(total_steps + 1):
        for emoji in loading_emojis:
            progress_symbols[min(step, total_steps - 1)] = emoji
            progress_text = " ".join(progress_symbols)
            await message.edit_text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {progress_text}")
            await asyncio.sleep(0.5)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–Ω–∏–º–∞—Ü–∏—è–º–∏

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    progress_symbols = ["‚úÖ"] * total_steps
    await message.edit_text(f"–ì–æ—Ç–æ–≤–æ! {' '.join(progress_symbols)}")

def create_animated_button(text: str, callback_data: str) -> InlineKeyboardButton:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (—ç–º–æ–¥–∑–∏)
    """
    animated_buttons = {
        "take_screenshot": "üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç",
        "presets_menu": "‚öôÔ∏è –ü—Ä–µ—Å–µ—Ç—ã",
        "help_menu": "‚ùì –ü–æ–º–æ—â—å",
        "about": "‚ÑπÔ∏è –û –±–æ—Ç–µ",
        "back_to_main": "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    }
    return InlineKeyboardButton(
        text=animated_buttons.get(callback_data, text),
        callback_data=callback_data
    )

@router.message(Command("start"))
async def handle_start(message: Message):
    """Start message handling"""
    try:
        logger.info(f"User {message.from_user.id} started the bot")
        await show_main_menu(message)
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_main_menu(message: Message):
    """Show main menu with animated buttons"""
    keyboard = [
        [
            create_animated_button("üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", "take_screenshot"),
            create_animated_button("‚öôÔ∏è –ü—Ä–µ—Å–µ—Ç—ã", "presets_menu")
        ],
        [
            create_animated_button("üìÇ –ê—Ä—Ö–∏–≤", "view_archive")
        ],
        [
            create_animated_button("‚ùì –ü–æ–º–æ—â—å", "help_menu"),
            create_animated_button("‚ÑπÔ∏è –û –±–æ—Ç–µ", "about")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    is_group = message.chat.type in ['group', 'supergroup']

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    all_screenshots = screenshot_storage.get_all_screenshots(0, 0)  # system user –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    monthly_stats = screenshot_stats.get_total_monthly_stats(all_screenshots)

    welcome_text = (
        f"{'–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º' if is_group else f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}'}\n\n"
        "–Ø - –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Google —Ç–∞–±–ª–∏—Ü.\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {monthly_stats['total_this_month']}\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {monthly_stats['remaining_limit']} –∏–∑ 100\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {monthly_stats['usage_percent']:.1f}%\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏:\n"
        "  - –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å\n"
        "  - –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "  - –ß—ë—Ç–∫–æ—Å—Ç—å\n"
        "  - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    await message.answer(welcome_text, reply_markup=reply_markup)
    logger.info("Main menu sent successfully")

@router.message(F.text == "üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
async def handle_screenshot_request(message: Message):
    """Handle screenshot button press"""
    try:
        logger.info("Creating screenshot menu")
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚ú® –° —É–ª—É—á—à–µ–Ω–∏–µ–º",
                    callback_data='enhancement_menu'
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data='back_to_main'
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            "–°–æ–∑–¥–∞—é –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–∏–µ–º:",
            reply_markup=reply_markup
        )
        # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await handle_screenshot(message)
    except Exception as e:
        logger.error(f"Error in screenshot request handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def handle_presets_menu(message: Message):
    """Show presets menu without previews"""
    log_action("presets_menu_start", "Starting presets menu creation")

    keyboard = [
        [create_animated_button("–ë–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π", "preset_none")],
        [create_animated_button("–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", "preset_high_contrast")],
        [create_animated_button("–Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "preset_bright")],
        [create_animated_button("–ß—ë—Ç–∫–æ—Å—Ç—å", "preset_sharp")],
        [create_animated_button("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "preset_balanced")],
        [create_animated_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è:\n\n"
        "‚Ä¢ –ë–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å - —É—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞\n"
        "‚Ä¢ –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏\n"
        "‚Ä¢ –ß—ë—Ç–∫–æ—Å—Ç—å - —É–ª—É—á—à–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=reply_markup
    )
    log_action("presets_menu_complete", "Presets menu created successfully")


# –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
async def handle_screenshot(message: Message, preset: str = None):
    """Take and process screenshot with animated progress"""
    status_message = None
    tmp_filename = None
    
    try:
        # Create the screenshots directory if it doesn't exist
        screenshots_dir = 'screenshots'
        temp_dir = os.path.join(screenshots_dir, 'temp')
        os.makedirs(screenshots_dir, exist_ok=True)
        os.makedirs(temp_dir, exist_ok=True)

        # Ensure cleanup of old temp files
        for f in os.listdir(temp_dir):
            if f.startswith('screenshot_'):
                try:
                    file_path = os.path.join(temp_dir, f)
                    file_age = datetime.now() - datetime.fromtimestamp(os.path.getctime(file_path))
                    if file_age > timedelta(hours=1):
                        os.unlink(file_path)
                        logger.info(f"Cleaned up old temp file: {f}")
                except Exception as e:
                    logger.warning(f"Failed to cleanup temp file {f}: {e}")
        log_action("screenshot_start", f"Starting screenshot process with preset: {preset}")

        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        status_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
        log_action("progress_bar_start", "Showing animated progress bar")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        await animated_progress_bar(status_message)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫ APIFlash
        await status_message.edit_text("üì∏ –ü–æ–ª—É—á–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–∞–±–ª–∏—Ü—ã...")
        log_action("apiflash_request", "Requesting screenshot from APIFlash")
        screenshot_data = take_screenshot(SHEET_URL)

        if screenshot_data is None:
            log_action("screenshot_error", "Failed to take screenshot")
            await status_message.edit_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        if preset:
            log_action("preset_apply", f"Applying preset: {preset}")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞
            await status_message.edit_text(f"‚ú® –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–µ—Å–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è: {preset}...")
            await animated_progress_bar(status_message, total_steps=3)
            screenshot_data = ImageProcessor.process_image(screenshot_data, preset)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        await status_message.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        log_action("save_result", "Saving processed screenshot")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ screenshots
        try:
            # Create temporary directory in the project root
            temp_dir = os.path.join('screenshots', 'temp')
            os.makedirs(temp_dir, exist_ok=True)
            tmp_filename = os.path.join(temp_dir, f'screenshot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png')
            logger.info(f"Saving temporary file to: {tmp_filename}")

            try:
                with open(tmp_filename, 'wb') as tmp_file:
                    tmp_file.write(screenshot_data)
                logger.info(f"Screenshot saved successfully to {tmp_filename}")
            except Exception as e:
                logger.error(f"Failed to save screenshot: {e}")
                raise

            logger.info(f"Temporary file created successfully at: {tmp_filename}")
        except Exception as e:
            logger.error(f"Error creating temporary file: {e}")
            raise

        try:
            log_action("send_photo", "Sending processed photo to Telegram")
            preset_names = {
                'high_contrast': '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å',
                'bright': '–Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                'sharp': '–ß—ë—Ç–∫–æ—Å—Ç—å',
                'balanced': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
                'none': '–ë–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π'
            }

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await status_message.edit_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é...")

            caption = "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–∞–±–ª–∏—Ü—ã"
            if preset:
                caption += f" ‚ú® (–ü—Ä–µ—Å–µ—Ç: {preset_names.get(preset, preset)})"

            photo = FSInputFile(tmp_filename)
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            file_id = datetime.now().strftime("%H%M%S")
            keyboard = [[
                InlineKeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤", callback_data=f"archive_{file_id}")
            ]]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            temp_files[file_id] = tmp_filename
            await message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await status_message.delete()
            log_action("process_complete", "Screenshot process completed successfully")
        except Exception as e:
            logger.error(f"Error in sending photo: {e}")
            # Clean up temporary file only on error
            if os.path.exists(tmp_filename):
                os.unlink(tmp_filename)
            raise

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)

    except Exception as e:
        error_details = str(e)
        log_action("error", f"Error in screenshot handler: {error_details}")
        
        if status_message:
            try:
                await status_message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as e2:
                logger.error(f"Failed to edit error message: {e2}")
                try:
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                except Exception as e3:
                    logger.error(f"Failed to send error message: {e3}")
        
        # Cleanup any temporary files
        if tmp_filename and os.path.exists(tmp_filename):
            try:
                os.unlink(tmp_filename)
                logger.info(f"Cleaned up temporary file after error: {tmp_filename}")
            except Exception as e4:
                logger.error(f"Failed to cleanup temp file: {e4}")

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    """Handle help button press"""
    try:
        help_text = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Google —Ç–∞–±–ª–∏—Ü\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏:\n"
            "  - –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: —É—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —á—ë—Ç–∫–æ—Å—Ç–∏\n"
            "  - –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏\n"
            "  - –ß—ë—Ç–∫–æ—Å—Ç—å: —É–ª—É—á—à–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            "  - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        )

        keyboard = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(help_text, reply_markup=reply_markup)
        logger.info("Help message sent successfully")
    except Exception as e:
        logger.error(f"Error in help handler: {e}")

@router.callback_query(F.data == 'back_to_main')
async def handle_back_to_main(callback: CallbackQuery):
    """Handle back to main menu button"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
    await show_main_menu(callback.message)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await callback.message.delete()

@router.callback_query(F.data == 'enhancement_menu')
async def handle_enhancement_menu(callback: CallbackQuery):
    """Show enhancement presets menu"""
    await callback.answer()
    await handle_presets_menu(callback.message)

@router.callback_query(F.data.startswith('preset_'))
async def handle_preset_callback(callback: CallbackQuery):
    """Handle preset selection"""
    try:
        preset = callback.data.replace('preset_', '')
        await callback.answer(f"–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø—Ä–µ—Å–µ—Ç–æ–º {preset}...")
        logger.info(f"Processing screenshot with preset: {preset}")
        await handle_screenshot(callback.message, preset=preset)
    except Exception as e:
        logger.error(f"Error in preset callback handler: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "take_screenshot")
async def handle_take_screenshot_callback(callback: CallbackQuery):
    """Handle take screenshot button press from main menu"""
    await callback.answer()
    await handle_screenshot_request(callback.message)

@router.callback_query(F.data == "presets_menu")
async def handle_presets_menu_callback(callback: CallbackQuery):
    """Handle presets menu button press from main menu"""
    await callback.answer()
    await handle_presets_menu(callback.message)

@router.callback_query(F.data == "help_menu")
async def handle_help_menu_callback(callback: CallbackQuery):
    """Handle help button press from main menu"""
    await callback.answer()
    await handle_help_button(callback.message)

@router.callback_query(F.data.startswith("select_"))
async def handle_screenshot_selection(callback: CallbackQuery):
    """Handle screenshot selection for multiple deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        filename = callback.data.replace("select_", "")
        user_key = f"user_{user_id}"
        
        logger.info(f"[SELECTION] Processing selection for file: {filename}")
        logger.info(f"[SELECTION] User key: {user_key}")
        logger.info(f"[SELECTION] Current selected files: {selected_screenshots.get(user_key, set())}")

        # Get all available screenshots
        screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        
        # Check if the file exists in available screenshots
        file_exists = any(os.path.basename(s["filepath"]) == filename for s in screenshots)
        if not file_exists:
            logger.error(f"[SELECTION] File not found: {filename}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Initialize set if needed
        if user_key not in selected_screenshots:
            selected_screenshots[user_key] = set()

        # Toggle selection using basename
        if filename in selected_screenshots[user_key]:
            selected_screenshots[user_key].remove(filename)
            logger.info(f"[SELECTION] Removed {filename} from selection")
            await callback.answer("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —É–±—Ä–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_screenshots[user_key].add(filename)
            logger.info(f"[SELECTION] Added {filename} to selection. Current selection: {selected_screenshots[user_key]}")
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º")

        # Update interface
        await update_screenshot_message(callback.message, user_id, chat_id)

    except Exception as e:
        logger.error(f"[SELECTION] Error in screenshot selection: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

async def update_screenshot_message(message: Message, user_id: int, chat_id: int):
    """Update message with selected screenshots"""
    try:
        logger.info("[UPDATE_MESSAGE] Starting message update")
        user_key = f"user_{user_id}"
        
        if not message or not message.text:
            logger.error("[UPDATE_MESSAGE] Message or message text is None")
            return

        current_label = None
        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in message.text:
            current_label = message.text.split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[1].split("\n")[0].strip()
            logger.info(f"[UPDATE_MESSAGE] Found category: {current_label}")
            screenshots = screenshot_storage.get_screenshots_by_label(current_label, user_id, chat_id)
            logger.info(f"[UPDATE_MESSAGE] Found {len(screenshots)} screenshots")
        else:
            logger.error("[UPDATE_MESSAGE] Cannot find category in message text")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if user_key not in selected_screenshots:
            selected_screenshots[user_key] = set()

        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if selected_screenshots[user_key]:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                    callback_data="delete_selected"
                )
            ])
            logger.info(f"[UPDATE_MESSAGE] Added delete selected button for {len(selected_screenshots[user_key])} files")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if screenshots:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ ({len(screenshots)})",
                    callback_data=f"delete_category_{current_label}"
                )
            ])
            logger.info(f"[UPDATE_MESSAGE] Added delete all button for {len(screenshots)} files")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        for screenshot in screenshots:
            filename = os.path.basename(screenshot['filepath'])
            is_selected = filename in selected_screenshots[user_key]
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{screenshot['timestamp']} {'‚úÖ' if is_selected else ''}",
                    callback_data=f"select_{filename}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
        ])

        logger.info("[UPDATE_MESSAGE] Updating message with new keyboard")
        await message.edit_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_label}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        logger.info("[UPDATE_MESSAGE] Message updated successfully")

    except Exception as e:
        logger.error(f"[UPDATE_MESSAGE] Error updating screenshot message: {e}", exc_info=True)

@router.callback_query(F.data == "view_archive")
async def handle_view_archive(callback: CallbackQuery):
    """Handle archive view button press"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        labels = screenshot_storage.get_all_labels(user_id, chat_id)

        keyboard = []
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –º–µ—Ç–∫–∞–º–∏
        if labels:
            for label in labels:
                screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{label} ({len(screenshots)})",
                        callback_data=f"label_{label}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.extend([
            [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="view_by_date")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search_labels")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        all_screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        monthly_stats = screenshot_stats.get_monthly_stats(all_screenshots)

        message_text = (
            f"–ê—Ä—Ö–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
            f"–í—Å–µ–≥–æ: {len(all_screenshots)} | –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_stats['total_this_month']}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_stats['remaining_limit']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        except Exception as e:
            logger.warning(f"Could not edit message: {e}, sending new message")
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback.message:
                await callback.message.delete()
            await callback.message.answer(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

    except Exception as e:
        logger.error(f"Error in archive handler: {e}", exc_info=True)
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        except Exception as e2:
            logger.error(f"Error sending error message: {e2}", exc_info=True)

@router.callback_query(F.data.startswith("label_"))
async def handle_label_screenshots(callback: CallbackQuery):
    """Handle showing screenshots for selected label"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("label_", "")
        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)

        if not screenshots:
            await callback.message.edit_text(
                "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
                ])
            )
            return

        keyboard = []
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ ({len(screenshots)})",
                callback_data=f"delete_category_{label}"
            )
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        for screenshot in screenshots:
            timestamp = screenshot["timestamp"]
            filename = os.path.basename(screenshot['filepath'])
            user_key = f"user_{user_id}"
            is_selected = filename in selected_screenshots[user_key]
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{timestamp} {'‚úÖ' if is_selected else ''}",
                    callback_data=f"show_screenshot_{filename}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
        ])

        await callback.message.edit_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {label}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing screenshots: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
            ])
        )

@router.callback_query(F.data == "delete_selected")
async def handle_delete_selected(callback: CallbackQuery):
    """Handle deletion of selected screenshots"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        logger.info(f"[DELETE_SELECTED] Starting deletion process for user {user_id}")
        logger.info(f"[DELETE_SELECTED] Selected screenshots: {selected_screenshots.get(user_key, set())}")

        if not selected_screenshots.get(user_key):
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # Get current label from message
        current_label = None
        if callback.message and callback.message.text:
            if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in callback.message.text:
                current_label = callback.message.text.split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[1].split("\n")[0].strip()
                logger.info(f"[DELETE_SELECTED] Current category: {current_label}")

        # Get screenshots for the current label and check file existence
        screenshots = screenshot_storage.get_screenshots_by_label(current_label, user_id, chat_id) if current_label else []
        available_files = {os.path.basename(s["filepath"]) for s in screenshots}
        
        logger.info(f"[DELETE_SELECTED] Selected files: {selected_screenshots[user_key]}")
        logger.info(f"[DELETE_SELECTED] Available files in category: {available_files}")
        
        valid_selections = selected_screenshots[user_key].intersection(available_files)
        logger.info(f"[DELETE_SELECTED] Valid selections after intersection: {valid_selections}")

        if not valid_selections:
            await callback.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # Request confirmation
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data=f"confirm_delete_selected"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"cancel_delete_selected"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {len(valid_selections)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"[DELETE_SELECTED] Error in delete selected handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[DELETE_SELECTED] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "confirm_delete_selected")
async def handle_confirm_delete_selected(callback: CallbackQuery):
    """Handle confirmation of selected screenshots deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots.get(user_key):
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # Verify selected files exist before starting deletion
        screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        available_files = {os.path.basename(s["filepath"]) for s in screenshots}
        valid_selections = selected_screenshots[user_key].intersection(available_files)

        if not valid_selections:
            await callback.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # Show deletion status
        status_message = await callback.message.edit_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(valid_selections)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for filename in valid_selections:
            try:
                logger.info(f"[CONFIRM_DELETE_SELECTED] Attempting to delete: {filename}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    selected_screenshots[user_key].remove(filename)
                    logger.info(f"[CONFIRM_DELETE_SELECTED] Successfully deleted: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE_SELECTED] Failed to delete: {filename}")

                # Update status every 5 files
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(valid_selections)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"[CONFIRM_DELETE_SELECTED] Error processing {filename}: {e}", exc_info=True)

        # Generate report
        result_text = [
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"[CONFIRM_DELETE_SELECTED] Deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"[CONFIRM_DELETE_SELECTED] Error in confirm delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CONFIRM_DELETE_SELECTED] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "cancel_delete_selected")
async def handle_cancel_delete_selected(callback: CallbackQuery):
    """Handle cancellation of selected screenshots deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        # Clear selection
        if user_key in selected_screenshots:
            selected_screenshots[user_key].clear()

        await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await handle_view_archive(callback)

    except Exception as e:
        logger.error(f"[CANCEL_DELETE_SELECTED] Error: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CANCEL_DELETE_SELECTED] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"[CONFIRM_DELETE] Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
        logger.info(f"[CONFIRM_DELETE] Found {len(screenshots)} screenshots to delete")
        for screenshot in screenshots:
            logger.info(f"[CONFIRM_DELETE] Will delete: {screenshot['filepath']} with label: {screenshot['label']}")

        if not screenshots:
            logger.warning(f"[CONFIRM_DELETE] No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await handle_view_archive(callback)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.message.edit_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for screenshot in screenshots:
            try:
                filename = os.path.basename(screenshot["filepath"])
                logger.info(f"[CONFIRM_DELETE] Attempting to delete: {filename}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"[CONFIRM_DELETE] Successfully deleted: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE] Failed to delete: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                if 'filename' in locals():
                    failed_files.append(filename)
                logger.error(f"[CONFIRM_DELETE] Error deleting file: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result_text = [
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"[CONFIRM_DELETE] Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"[CONFIRM_DELETE] Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CONFIRM_DELETE] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data.startswith("show_screenshot_"))
async def handle_show_screenshot(callback: CallbackQuery):
    """Handle showing specific screenshot"""
    try:
        logger.info(f"Showing screenshot: {callback.data}")
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        filename = callback.data.replace("show_screenshot_", "")
        user_key = f"user_{user_id}"

        screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        screenshot_info = None

        for screenshot in screenshots:
            if os.path.basename(screenshot["filepath"]) == filename:
                screenshot_info = screenshot
                break

        if screenshot_info and os.path.exists(screenshot_info["filepath"]):
            photo = FSInputFile(screenshot_info["filepath"])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            date = screenshot_info["timestamp"].split()[0]
            is_selected = filename in selected_screenshots[user_key]

            keyboard = [
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞–Ω" if is_selected else "‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å",
                        callback_data=f"select_{filename}"
                    ),
                    InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_{filename}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ö —Å–ø–∏—Å–∫—É",
                        callback_data="view_archive"
                    )
                ]
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            if len(selected_screenshots[user_key]) > 0:
                keyboard.insert(0, [
                    InlineKeyboardButton(
                        text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                        callback_data="delete_selected"
                    )
                ])

            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo,
                caption=f"{screenshot_info['label']}\n{screenshot_info['timestamp']}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            logger.info(f"Successfully showed screenshot: {filename}")
        else:
            logger.error(f"Screenshot not found: {filename}")
            await callback.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.edit_text(
                "–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
                ])
            )

    except Exception as e:
        logger.error(f"Error showing screenshot: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
            ])
        )

@router.callback_query(F.data.startswith("delete_"))
async def handle_delete_screenshot(callback: CallbackQuery):
    """Handle screenshot deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        
        # Handle both category deletion and single file deletion
        if callback.data.startswith("delete_category_"):
            await handle_delete_category(callback)
            return
            
        filename = callback.data.replace("delete_", "")
        
        logger.info(f"[DELETE] Handling deletion request for file: {filename}")
        logger.info(f"[DELETE] Original callback data: {callback.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        file_exists = any(os.path.basename(s["filepath"]) == filename for s in screenshots)
        
        if not file_exists:
            logger.error(f"[DELETE] File not found: {filename}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Handle deletion
        if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É–¥–∞–ª–µ–Ω")
            logger.info(f"[DELETE] Successfully deleted screenshot: {filename}")
            await handle_view_archive(callback)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
            logger.error(f"[DELETE] Failed to delete screenshot: {filename}")

    except Exception as e:
        logger.error(f"[DELETE] Error in delete screenshot handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[DELETE] Error returning to archive: {e2}", exc_info=True)


@router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """Handle deletion of all screenshots in a category"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("delete_category_", "")
        
        logger.info(f"[DELETE_CATEGORY] Starting deletion process for category '{label}'")
        logger.info(f"[DELETE_CATEGORY] User ID: {user_id}, Chat ID: {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
        logger.info(f"[DELETE_CATEGORY] Found {len(screenshots)} screenshots in category")
        for screenshot in screenshots:
            logger.info(f"[DELETE_CATEGORY] Found screenshot: {screenshot['filepath']} with label: {screenshot['label']}")

        if not screenshots:
            logger.warning(f"[DELETE_CATEGORY] No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_delete_category_{label}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"label_{label}"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{label}\"?\n"
            f"–í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)}\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"[DELETE_CATEGORY] Error in delete category handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[DELETE_CATEGORY] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"[CONFIRM_DELETE] Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
        logger.info(f"[CONFIRM_DELETE] Found {len(screenshots)} screenshots to delete")

        if not screenshots:
            logger.warning(f"[CONFIRM_DELETE] No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await handle_view_archive(callback)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for screenshot in screenshots:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
                filename = os.path.basename(screenshot["filepath"])
                logger.info(f"[CONFIRM_DELETE] Attempting to delete: {filename}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"[CONFIRM_DELETE] Successfully deleted: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE] Failed to delete: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                if 'filename' in locals():
                    failed_files.append(filename)
                logger.error(f"[CONFIRM_DELETE] Error deleting file: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result_text = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}':",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"[CONFIRM_DELETE] Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"[CONFIRM_DELETE] Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CONFIRM_DELETE] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "delete_selected")
async def handle_delete_selected(callback: CallbackQuery):
    """Handle deletion of selected screenshots"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data="confirm_delete_selected"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete_selected"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {len(selected_screenshots[user_key])} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"[DELETE_SELECTED] Error in delete selected handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "confirm_delete_selected")
async def handle_confirm_delete_selected(callback: CallbackQuery):
    """Handle confirmation of selected screenshots deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        logger.info(f"[CONFIRM_DELETE_SELECTED] Starting deletion of {len(selected_screenshots[user_key])} screenshots")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.message.edit_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(selected_screenshots[user_key])}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for filename in list(selected_screenshots[user_key]):  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
            try:
                logger.info(f"[CONFIRM_DELETE_SELECTED] Processing file: {filename}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    selected_screenshots[user_key].remove(filename)  # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                    logger.info(f"[CONFIRM_DELETE_SELECTED] Successfully deleted: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE_SELECTED] Failed to delete: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(selected_screenshots[user_key])}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"[CONFIRM_DELETE_SELECTED] Error processing {filename}: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result_text = [
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"[CONFIRM_DELETE_SELECTED] Deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"[CONFIRM_DELETE_SELECTED] Error in confirm delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CONFIRM_DELETE_SELECTED] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"[CONFIRM_DELETE] Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")
        logger.info(f"[CONFIRM_DELETE] Callback data: {callback.data}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
        logger.info(f"[CONFIRM_DELETE] Found {len(screenshots)} screenshots to delete")

        if not screenshots:
            logger.warning(f"[CONFIRM_DELETE] No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await handle_view_archive(callback)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for screenshot in screenshots:
            try:
                filename = os.path.basename(screenshot["filepath"])
                logger.info(f"[CONFIRM_DELETE] Attempting to delete: {filename}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"[CONFIRM_DELETE] Successfully deleted: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE] Failed to delete: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                # Only add the filename to failed_files if we have it
                if 'filename' in locals():
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE] Error deleting {filename}: {e}", exc_info=True)
                else:
                    logger.error(f"[CONFIRM_DELETE] Error processing screenshot: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result_text = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}':",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"[CONFIRM_DELETE] Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"[CONFIRM_DELETE] Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CONFIRM_DELETE] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "confirm_delete_selected")
async def handle_confirm_delete_selected(callback: CallbackQuery):
    """Handle confirmation of selected screenshots deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.message.edit_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(selected_screenshots[user_key])}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for filename in list(selected_screenshots[user_key]):  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
            try:
                logger.info(f"Attempting to delete selected screenshot: {filename}")
                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    selected_screenshots[user_key].remove(filename)  # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                    logger.info(f"Successfully deleted selected screenshot: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"Failed to delete selected screenshot: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(selected_screenshots[user_key])}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"Error deleting selected screenshot {filename}: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result_text = [
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in confirm delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"Error returning to archive: {e2}", exc_info=True)

# Update screenshot message function
async def update_screenshot_message(message: Message, user_id: int, chat_id: int):
    """Update message with selected screenshots"""
    try:
        user_key = f"user_{user_id}"
        # –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text:
            logger.error("Message text is empty")
            return
            
        current_label = None
        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in message.text:
            current_label = message.text.split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[1].split("\n")[0].strip()
            screenshots = screenshot_storage.get_screenshots_by_label(current_label, user_id, chat_id)
        else:
            logger.error("Cannot find category in message text")
            return

        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if selected_screenshots[user_key]:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                    callback_data="delete_selected"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ ({len(screenshots)})",
                callback_data=f"delete_category_{current_label}"
            )
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        for screenshot in screenshots:
            filename = os.path.basename(screenshot['filepath'])
            is_selected = filename in selected_screenshots[user_key]
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{screenshot['timestamp']} {'‚úÖ' if is_selected else ''}",
                    callback_data=f"select_{filename}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
        ])

        await message.edit_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_label}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error updating screenshot message: {e}", exc_info=True)
@router.callback_query(F.data == "search_labels")
async def handle_search_request(callback: CallbackQuery):
    """Handle label search request"""
    await callback.message.edit_text(
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ])
    )
    # Store state for next message
    temp_files[f"search_{callback.from_user.id}"] = True

@router.message(lambda msg: f"search_{msg.from_user.id}" in temp_files)
async def handle_search_query(message: Message):
    """Handle search query"""
    try:
        del temp_files[f"search_{message.from_user.id}"]
        screenshots = screenshot_storage.search_by_label(message.text)

        if not screenshots:
            await message.reply(
                "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
                ])
            )
            return

        await message.reply(
            f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
            ])
        )

        for screenshot in screenshots:
            if os.path.exists(screenshot["filepath"]):
                photo = FSInputFile(screenshot["filepath"])
                keyboard = [[InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{os.path.basename(screenshot['filepath'])}"
                )]]
                await message.answer_photo(
                    photo=photo,
                    caption=f"üì∏ {screenshot['label']}\nüìÖ {screenshot['timestamp']}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )

    except Exception as e:
        logger.error(f"Error handling search: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

@router.callback_query(F.data == "about")
async def handle_about_callback(callback: CallbackQuery):
    """Handle about button press"""
    try:
        await callback.answer()
        about_text = (
            "–û –±–æ—Ç–µ:\n\n"
            "Google Sheets Screenshot Bot\n"
            "–°–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Google —Ç–∞–±–ª–∏—Ü\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏\n"
            "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤–µ\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

        keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await callback.message.edit_text(
            about_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"Error in about callback: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("archive_"))
async def handle_archive_screenshot(callback: CallbackQuery):
    """Handle archiving a screenshot sent by bot"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        file_id = callback.data.replace("archive_", "")
        filepath = temp_files.get(file_id)

        if not filepath:
            logger.error(f"File not found in temp_files for ID: {file_id}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if not os.path.exists(filepath):
            logger.error(f"File does not exist at path: {filepath}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ—Ç–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"autosave_{file_id}")],
            [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –º–µ—Ç–∫—É", callback_data=f"customlabel_{file_id}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_archive")]
        ]

        await callback.message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –∞—Ä—Ö–∏–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in archive screenshot handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("autosave_"))
async def handle_autosave(callback: CallbackQuery):
    """Handle automatic saving with timestamp"""
    try:
        file_id= callback.data.replace("autosave_", "")
        filepath = temp_files.get(file_id)
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id

        timestamp = datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M:%S")
        label = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é {timestamp}"

        with open(filepath, 'rb') as f:
            screenshot_data = f.read()

        saved_path = screenshot_storage.save_screenshot(
            screenshot_data, label, user_id, chat_id
        )

        if saved_path:
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤")
            await cleanup_temp_file(filepath, file_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    except Exception as e:
        logger.error(f"Error in autosave handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("customlabel_"))
async def handle_custom_label_request(callback: CallbackQuery):
    """Handle request for custom label"""
    try:
        file_id = callback.data.replace("customlabel_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        temp_files[f"labeling_{callback.from_user.id}"] = file_id

        await callback.message.reply(
            "üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:"
        )
    except Exception as e:
        logger.error(f"Error in custom label handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.message(lambda msg: f"labeling_{msg.from_user.id}" in temp_files)
async def handle_custom_label(message: Message):
    """Handle custom label input"""
    try:
        file_id = temp_files.pop(f"labeling_{message.from_user.id}")
        filepath = temp_files.get(file_id)
        user_id = message.from_user.id
        chat_id = message.chat.id

        if not filepath or not os.path.exists(filepath):
            await message.reply("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(filepath, 'rb') as f:
            screenshot_data = f.read()

        saved_path = screenshot_storage.save_screenshot(
            screenshot_data, message.text, user_id, chat_id
        )

        if saved_path:
            await message.reply("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π")
            await cleanup_temp_file(filepath, file_id)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    except Exception as e:
        logger.error(f"Error saving with custom label: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def cleanup_temp_file(filepath: str, file_id: str):
    """Clean up temporary file and its reference"""
    try:
        os.remove(filepath)
        del temp_files[file_id]
        logger.info(f"Temporary file removed: {filepath}")
    except Exception as e:
        logger.error(f"Error removing temporary file: {e}")

@router.callback_query(F.data == "cancel_archive")
async def handle_cancel_archive(callback: CallbackQuery):
    """Handle archive cancellation"""
    await callback.answer("‚ùå –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.delete()

@router.callback_query(F.data.startswith("date_"))
async def handle_date_screenshots(callback: CallbackQuery):
    """Handle showing screenshots for selected date"""
    try:
        logger.info(f"Processing date screenshots request: {callback.data}")
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        date = callback.data.replace("date_", "")

        logger.info(f"Fetching screenshots for date {date}, user {user_id}, chat {chat_id}")
        screenshots = screenshot_storage.get_screenshots_by_date(date, user_id, chat_id)

        if not screenshots:
            logger.info(f"No screenshots found for date {date}")
            await callback.message.edit_text(
                "–ó–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
                ])
            )
            return

        logger.info(f"Found {len(screenshots)} screenshots for date {date}")
        keyboard = []
        for screenshot in screenshots:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ timestamp –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            try:
                timestamp_parts = screenshot["timestamp"].split()
                time_part = timestamp_parts[1] if len(timestamp_parts) > 1 else "00:00"
            except Exception as e:
                logger.error(f"Error parsing timestamp {screenshot['timestamp']}: {e}")
                time_part = "00:00"

            filename = os.path.basename(screenshot['filepath'])
            user_key = f"user_{user_id}"
            is_selected = filename in selected_screenshots[user_key]
            keyboard.append([InlineKeyboardButton(
                text=f"{screenshot['label']} ({time_part}) {'‚úÖ' if is_selected else ''}",
                callback_data=f"show_screenshot_{filename}"
            )])

        keyboard.append([InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")])

        await callback.message.edit_text(
            f"–°–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞ {date}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing date screenshots: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
            ])
        )

@router.callback_query(F.data.startswith("delete_"))
async def handle_delete_screenshot(callback: CallbackQuery):
    """Handle screenshot deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        filename = callback.data.replace("delete_", "")

        logger.info(f"Attempting to delete screenshot: {filename} for user {user_id} in chat {chat_id}")

        if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
            logger.info(f"Successfully deleted screenshot: {filename}")
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É–¥–∞–ª–µ–Ω")
            # Remove the message with the deleted screenshot
            await callback.message.delete()
        else:
            logger.error(f"Failed to delete screenshot: {filename}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"Error in delete handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@router.callback_query(F.data == "search_labels")
async def handle_search_request(callback: CallbackQuery):
    """Handle label search request"""
    await callback.message.edit_text(
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ])
    )
    # Store state for next message
    temp_files[f"search_{callback.from_user.id}"] = True

@router.message(lambda msg: f"search_{msg.from_user.id}" in temp_files)
async def handle_search_query(message: Message):
    """Handle search query"""
    try:
        del temp_files[f"search_{message.from_user.id}"]
        screenshots = screenshot_storage.search_by_label(message.text)

        if not screenshots:
            await message.reply(
                "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
                ])
            )
            return

        await message.reply(
            f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
            ])
        )

        for screenshot in screenshots:
            if os.path.exists(screenshot["filepath"]):
                photo = FSInputFile(screenshot["filepath"])
                keyboard = [[InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{os.path.basename(screenshot['filepath'])}"
                )]]
                await message.answer_photo(
                    photo=photo,
                    caption=f"üì∏ {screenshot['label']}\nüìÖ {screenshot['timestamp']}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )

    except Exception as e:
        logger.error(f"Error handling search: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

@router.callback_query(F.data == "about")
async def handle_about_callback(callback: CallbackQuery):
    """Handle about button press"""
    try:
        await callback.answer()
        about_text = (
            "–û –±–æ—Ç–µ:\n\n"
            "Google Sheets Screenshot Bot\n"
            "–°–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Google —Ç–∞–±–ª–∏—Ü\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏\n"
            "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤–µ\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

        keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await callback.message.edit_text(
            about_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"Error in about callback: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("archive_"))
async def handle_archive_screenshot(callback: CallbackQuery):
    """Handle archiving a screenshot sent by bot"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        file_id = callback.data.replace("archive_", "")
        filepath = temp_files.get(file_id)

        if not filepath:
            logger.error(f"File not found in temp_files for ID: {file_id}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if not os.path.exists(filepath):
            logger.error(f"File does not exist at path: {filepath}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ—Ç–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"autosave_{file_id}")],
            [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –º–µ—Ç–∫—É", callback_data=f"customlabel_{file_id}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_archive")]
        ]

        await callback.message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –∞—Ä—Ö–∏–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in archive screenshot handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("autosave_"))
async def handle_autosave(callback: CallbackQuery):
    """Handle automatic saving with timestamp"""
    try:
        file_id= callback.data.replace("autosave_", "")
        filepath = temp_files.get(file_id)
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id

        timestamp = datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M:%S")
        label = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é {timestamp}"

        with open(filepath, 'rb') as f:
            screenshot_data = f.read()

        saved_path = screenshot_storage.save_screenshot(
            screenshot_data, label, user_id, chat_id
        )

        if saved_path:
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤")
            await cleanup_temp_file(filepath, file_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    except Exception as e:
        logger.error(f"Error in autosave handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("customlabel_"))
async def handle_custom_label_request(callback: CallbackQuery):
    """Handle request for custom label"""
    try:
        file_id = callback.data.replace("customlabel_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        temp_files[f"labeling_{callback.from_user.id}"] = file_id

        await callback.message.reply(
            "üìù –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:"
        )
    except Exception as e:
        logger.error(f"Error in custom label handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.message(lambda msg: f"labeling_{msg.from_user.id}" in temp_files)
async def handle_custom_label(message: Message):
    """Handle custom label input"""
    try:
        file_id = temp_files.pop(f"labeling_{message.from_user.id}")
        filepath = temp_files.get(file_id)
        user_id = message.from_user.id
        chat_id = message.chat.id

        if not filepath or not os.path.exists(filepath):
            await message.reply("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(filepath, 'rb') as f:
            screenshot_data = f.read()

        saved_path = screenshot_storage.save_screenshot(
            screenshot_data, message.text, user_id, chat_id
        )

        if saved_path:
            await message.reply("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π")
            await cleanup_temp_file(filepath, file_id)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    except Exception as e:
        logger.error(f"Error saving with custom label: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """Handle deletion of all screenshots in a category"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("delete_category_", "")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_delete_category_{label}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"label_{label}"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{label}\"?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in delete category handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)

        if not screenshots:
            logger.warning(f"No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
            await handle_view_archive(callback)
            return

        logger.info(f"Found {len(screenshots)} screenshots to delete in category '{label}'")

        deleted_count = 0
        failed_count = 0
        failed_files = []

        # Process deletion
        status_message = await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        for screenshot in screenshots:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
                filepath = screenshot["filepath"]
                filename = os.path.basename(filepath)
                logger.info(f"Attempting to delete screenshot: {filename} from path: {filepath}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"Successfully deleted screenshot: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"Failed to delete screenshot: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"Error deleting screenshot {filename}: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        result_text = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}':",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "view_by_date")
async def handle_view_by_date(callback: CallbackQuery):
    """Handle showing screenshots by date"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)

        if not screenshots:
            await callback.message.edit_text(
                "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
                ])
            )
            return

        dates = set()
        for screenshot in screenshots:
            date = screenshot["timestamp"].split()[0]
            dates.add(date)

        keyboard = []
        for date in sorted(dates, reverse=True):
            date_screenshots = screenshot_storage.get_screenshots_by_date(date, user_id, chat_id)
            keyboard.append([InlineKeyboardButton(
                text=f"üìÖ {date} ({len(date_screenshots)})",
                callback_data=f"date_{date}"
            )])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
        ])

        await callback.message.edit_text(
            "üìÖ –ê—Ä—Ö–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"Error in view by date handler: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
            ])
        )

@router.callback_query(F.data.startswith("select_"))
async def handle_screenshot_selection(callback: CallbackQuery):
    """Handle screenshot selection for multiple deletion"""
    try:
        user_id = callback.from_user.id
        filename = callback.data.replace("select_", "")
        user_key = f"user_{user_id}"

        if filename in selected_screenshots[user_key]:
            selected_screenshots[user_key].remove(filename)
            await callback.answer("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —É–±—Ä–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_screenshots[user_key].add(filename)
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–±—Ä–∞–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–±–æ—Ä–∞
        await update_screenshot_message(callback.message, filename, user_id)

    except Exception as e:
        logger.error(f"Error in screenshot selection: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

async def update_screenshot_message(message: Message, filename: str, user_id: int):
    """Update message with selection status"""
    try:
        user_key = f"user_{user_id}"
        is_selected = filename in selected_screenshots[user_key]

        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–±—Ä–∞–Ω" if is_selected else "‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å",
                    callback_data=f"select_{filename}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{filename}"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_archive")]
        ]

        if len(selected_screenshots[user_key]) > 0:
            keyboard.insert(0, [
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                    callback_data="delete_selected"
                )
            ])

        await message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"Error updating screenshot message: {e}", exc_info=True)

@router.callback_query(F.data == "delete_selected")
async def handle_delete_selected(callback: CallbackQuery):
    """Handle deletion of multiple selected screenshots"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data="confirm_delete_selected"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete_selected"
                )
            ]
        ]

        await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã ({len(selected_screenshots[user_key])})?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in delete selected handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "confirm_delete_selected")
async def handle_confirm_delete_selected(callback: CallbackQuery):
    """Handle confirmation of multiple screenshot deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        deleted_count = 0
        failed_count = 0

        for filename in selected_screenshots[user_key]:
            if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                deleted_count += 1
            else:
                failed_count += 1

        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        selected_screenshots[user_key].clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        )

        keyboard = [
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞—Ä—Ö–∏–≤", callback_data="view_archive")]
        ]

        await callback.message.edit_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in confirm delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@router.callback_query(F.data == "cancel_delete_selected")
async def handle_cancel_delete_selected(callback: CallbackQuery):
    """Handle cancellation of multiple screenshot deletion"""
    try:
        user_id = callback.from_user.id
        user_key = f"user_{user_id}"

        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        selected_screenshots[user_key].clear()

        await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
        await handle_view_archive(callback)

    except Exception as e:
        logger.error(f"Error in cancel delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """Handle deletion of all screenshots in a category"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("delete_category_", "")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_delete_category_{label}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"label_{label}"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{label}\"?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in delete category handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)

        if not screenshots:
            logger.warning(f"No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
            await handle_view_archive(callback)
            return

        logger.info(f"Found {len(screenshots)} screenshots to delete in category '{label}'")

        deleted_count = 0
        failed_count = 0
        failed_files = []

        # Process deletion
        status_message = await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        for screenshot in screenshots:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
                filepath = screenshot["filepath"]
                filename = os.path.basename(filepath)
                logger.info(f"Attempting to delete screenshot: {filename} from path: {filepath}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"Successfully deleted screenshot: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"Failed to delete screenshot: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"Error deleting screenshot {filename}: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        result_text = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}':",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "view_stats")
async def handle_view_stats(callback: CallbackQuery):
    """Handle showing screenshot statistics"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        monthly_stats = screenshot_stats.get_monthly_stats(all_screenshots)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ –º–µ—Ç–∫–∞–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        labels = screenshot_storage.get_all_labels(user_id, chat_id)
        label_counts = {}
        for label in labels:
            label_screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
            label_counts[label] = len(label_screenshots)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n\n"
            f"üìà –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(all_screenshots)}\n"
            f"üóì –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_stats['total_this_month']}\n"
            f"üí´ –î–æ—Å—Ç—É–ø–Ω–æ: {monthly_stats['remaining_limit']} –∏–∑ 100\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {monthly_stats['usage_percent']:.1f}%\n\n"
            "üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º emoji –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_emoji = {
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç": "üìÜ",
            "–ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞": "üÜï",
            "–°–µ—Ä–µ–¥–∏–Ω–∞ –º–µ—Å—è—Ü–∞": "üìç",
            "–ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞": "üèÅ",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é": "üíæ"
        }

        for label, count in label_counts.items():
            emoji = category_emoji.get(label, "üìù")
            stats_text += f"{emoji} {label}: {count}\n"

        keyboard = [
            [
                InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É", callback_data="filter_period"),
                InlineKeyboardButton(text="üìÇ –ê—Ä—Ö–∏–≤", callback_data="view_archive")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error showing statistics: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_archive")]
            ])
        )

@router.callback_query(F.data == "filter_period")
async def handle_filter_period(callback: CallbackQuery):
    """Handle period filter selection"""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data="period_week")],
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data="period_month")],
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", callback_data="period_3months")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_stats")]
        ]

        await callback.message.edit_text(
            "üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error showing period filter: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

@router.callback_query(F.data.startswith("period_"))
async def handle_period_selection(callback: CallbackQuery):
    """Handle specific period selection"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        period = callback.data.replace("period_", "")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        end_date = datetime.now(pytz.UTC)
        period_names = {
            "week": "–Ω–µ–¥–µ–ª—é",
            "month": "–º–µ—Å—è—Ü",
            "3months": "3 –º–µ—Å—è—Ü–∞"
        }

        if period == "week":
            start_date = end_date - timedelta(days=7)
        elif period == "month":
            start_date = end_date - timedelta(days=30)
        elif period == "3months":
            start_date = end_date - timedelta(days=90)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        all_screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        filtered_screenshots = screenshot_stats.filter_by_period(
            all_screenshots,
            start_date.strftime("%Y-%m-%d"),
            end_date.strftime("%Y-%m-%d")
        )

        if not filtered_screenshots:
            await callback.message.edit_text(
                f"üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π {period_names[period]} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="filter_period")]
                ])
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        dates = set()
        for screenshot in filtered_screenshots:
            date = screenshot["timestamp"].split()[0]
            dates.add(date)

        keyboard = []
        for date in sorted(dates, reverse=True):
            day = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
            count = len([s for s in filtered_screenshots if s["timestamp"].startswith(date)])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ {day} ({count})",
                    callback_data=f"date_{date}"
                )
            ])

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="filter_period")])

        await callback.message.edit_text(
            f"üìä –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞ {period_names[period]}:\n"
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(filtered_screenshots)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error handling period selection: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data.startswith("select_"))
async def handle_screenshot_selection(callback: CallbackQuery):
    """Handle screenshot selection for multiple deletion"""
    try:
        user_id = callback.from_user.id
        filename = callback.data.replace("select_", "")
        user_key = f"user_{user_id}"

        if filename in selected_screenshots[user_key]:
            selected_screenshots[user_key].remove(filename)
            await callback.answer("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —É–±—Ä–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_screenshots[user_key].add(filename)
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–±—Ä–∞–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–±–æ—Ä–∞
        await update_screenshot_message(callback.message, filename, user_id)

    except Exception as e:
        logger.error(f"Error in screenshot selection: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

async def update_screenshot_message(message: Message, filename: str, user_id: int):
    """Update message with selection status"""
    try:
        user_key = f"user_{user_id}"
        is_selected = filename in selected_screenshots[user_key]

        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–±—Ä–∞–Ω" if is_selected else "‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å",
                    callback_data=f"select_{filename}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{filename}"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_archive")]
        ]

        if len(selected_screenshots[user_key]) > 0:
            keyboard.insert(0, [
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                    callback_data="delete_selected"
                )
            ])

        await message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"Error updating screenshot message: {e}", exc_info=True)

@router.callback_query(F.data == "delete_selected")
async def handle_delete_selected(callback: CallbackQuery):
    """Handle deletion of multiple selected screenshots"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data="confirm_delete_selected"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete_selected"
                )
            ]
        ]

        await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã ({len(selected_screenshots[user_key])})?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in delete selected handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "confirm_delete_selected")
async def handle_confirm_delete_selected(callback: CallbackQuery):
    """Handle confirmation of multiple screenshot deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        deleted_count = 0
        failed_count = 0

        for filename in selected_screenshots[user_key]:
            if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                deleted_count += 1
            else:
                failed_count += 1

        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        selected_screenshots[user_key].clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        )

        keyboard = [
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞—Ä—Ö–∏–≤", callback_data="view_archive")]
        ]

        await callback.message.edit_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in confirm delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@router.callback_query(F.data == "cancel_delete_selected")
async def handle_cancel_delete_selected(callback: CallbackQuery):
    """Handle cancellation of multiple screenshot deletion"""
    try:
        user_id = callback.from_user.id
        user_key = f"user_{user_id}"

        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        selected_screenshots[user_key].clear()

        await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
        await handle_view_archive(callback)

    except Exception as e:
        logger.error(f"Error in cancel delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """Handle deletion of all screenshots in a category"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("delete_category_", "")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_delete_category_{label}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"label_{label}"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{label}\"?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in delete category handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)

        if not screenshots:
            logger.warning(f"No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
            await handle_view_archive(callback)
            return

        logger.info(f"Found {len(screenshots)} screenshots to delete in category '{label}'")

        deleted_count = 0
        failed_count = 0
        failed_files = []

        # Process deletion
        status_message = await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        for screenshot in screenshots:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
                filepath = screenshot["filepath"]
                filename = os.path.basename(filepath)
                logger.info(f"Attempting to delete screenshot: {filename} from path: {filepath}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"Successfully deleted screenshot: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"Failed to delete screenshot: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}'...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"Error deleting screenshot {filename}: {e}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        result_text = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{label}':",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞—Ä—Ö–∏–≤
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "view_stats")
async def handle_view_stats(callback: CallbackQuery):
    """Handle showing screenshot statistics"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        monthly_stats = screenshot_stats.get_monthly_stats(all_screenshots)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ –º–µ—Ç–∫–∞–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        labels = screenshot_storage.get_all_labels(user_id, chat_id)
        label_counts = {}
        for label in labels:
            label_screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
            label_counts[label] = len(label_screenshots)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n\n"
            f"üìà –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(all_screenshots)}\n"
            f"üóì –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_stats['total_this_month']}\n"
            f"üí´ –î–æ—Å—Ç—É–ø–Ω–æ: {monthly_stats['remaining_limit']} –∏–∑ 100\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {monthly_stats['usage_percent']:.1f}%\n\n"
            "üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º emoji –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_emoji = {
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç": "üìÜ",
            "–ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞": "üÜï",
            "–°–µ—Ä–µ–¥–∏–Ω–∞ –º–µ—Å—è—Ü–∞": "üìç",
            "–ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞": "üèÅ",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é": "üíæ"
        }

        for label, count in label_counts.items():
            emoji = category_emoji.get(label, "üìù")
            stats_text += f"{emoji} {label}: {count}\n"

        keyboard = [
            [
                InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É", callback_data="filter_period"),
                InlineKeyboardButton(text="üìÇ –ê—Ä—Ö–∏–≤", callback_data="view_archive")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error showing statistics: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_archive")]
            ])
        )

@router.callback_query(F.data == "filter_period")
async def handle_filter_period(callback: CallbackQuery):
    """Handle period filter selection"""
    try:
        keyboard = [
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data="period_week")],
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data="period_month")],
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", callback_data="period_3months")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_stats")]
        ]

        await callback.message.edit_text(
            "üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error showing period filter: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

@router.callback_query(F.data.startswith("period_"))
async def handle_period_selection(callback: CallbackQuery):
    """Handle specific period selection"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        period = callback.data.replace("period_", "")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        end_date = datetime.now(pytz.UTC)
        period_names = {
            "week": "–Ω–µ–¥–µ–ª—é",
            "month": "–º–µ—Å—è—Ü",
            "3months": "3 –º–µ—Å—è—Ü–∞"
        }

        if period == "week":
            start_date = end_date - timedelta(days=7)
        elif period == "month":
            start_date = end_date - timedelta(days=30)
        elif period == "3months":
            start_date = end_date - timedelta(days=90)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        all_screenshots = screenshot_storage.get_all_screenshots(user_id, chat_id)
        filtered_screenshots = screenshot_stats.filter_by_period(
            all_screenshots,
            start_date.strftime("%Y-%m-%d"),
            end_date.strftime("%Y-%m-%d")
        )

        if not filtered_screenshots:
            await callback.message.edit_text(
                f"üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π {period_names[period]} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="filter_period")]
                ])
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        dates = set()
        for screenshot in filtered_screenshots:
            date = screenshot["timestamp"].split()[0]
            dates.add(date)

        keyboard = []
        for date in sorted(dates, reverse=True):
            day = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
            count = len([s for s in filtered_screenshots if s["timestamp"].startswith(date)])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ {day} ({count})",
                    callback_data=f"date_{date}"
                )
            ])

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="filter_period")])

        await callback.message.edit_text(
            f"üìä –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞ {period_names[period]}:\n"
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(filtered_screenshots)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error handling period selection: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

@router.callback_query(F.data.startswith("select_"))
async def handle_screenshot_selection(callback: CallbackQuery):
    """Handle screenshot selection for multiple deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        filename = callback.data.replace("select_", "")
        user_key = f"user_{user_id}"

        if filename in selected_screenshots[user_key]:
            selected_screenshots[user_key].remove(filename)
            await callback.answer("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —É–±—Ä–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_screenshots[user_key].add(filename)
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await update_screenshot_message(callback.message, user_id, chat_id)

    except Exception as e:
        logger.error(f"Error in screenshot selection: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def update_screenshot_message(message: Message, user_id: int, chat_id: int):
    """Update message with selected screenshots"""
    try:
        user_key = f"user_{user_id}"
        current_label = None

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in message.text:
            current_label = message.text.split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[1].split("\n")[0].strip()
            screenshots = screenshot_storage.get_screenshots_by_label(current_label, user_id, chat_id)
        else:
            return

        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if selected_screenshots[user_key]:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                    callback_data="delete_selected"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ ({len(screenshots)})",
                callback_data=f"delete_category_{current_label}"
            )
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        for screenshot in screenshots:
            filename = os.path.basename(screenshot['filepath'])
            is_selected = filename in selected_screenshots[user_key]
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{screenshot['timestamp']} {'‚úÖ' if is_selected else ''}",
                    callback_data=f"select_{filename}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
        ])

        await message.edit_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_label}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error updating screenshot message: {e}", exc_info=True)

@router.callback_query(F.data == "delete_selected")
async def handle_delete_selected(callback: CallbackQuery):
    """Handle deletion of selected screenshots"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        if not selected_screenshots[user_key]:
            await callback.answer("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data="confirm_delete_selected"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete_selected"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {len(selected_screenshots[user_key])} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in delete selected handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "confirm_delete_selected")
async def handle_confirm_delete_selected(callback: CallbackQuery):
    """Handle confirmation of selected screenshots deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        user_key = f"user_{user_id}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.message.edit_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(selected_screenshots[user_key])}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for filename in selected_screenshots[user_key]:
            try:
                logger.info(f"Attempting to delete selected screenshot: {filename}")
                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"Successfully deleted selected screenshot: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"Failed to delete selected screenshot: {filename}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(selected_screenshots[user_key])}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                failed_files.append(filename)
                logger.error(f"Error deleting selected screenshot {filename}: {e}", exc_info=True)

        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        selected_screenshots[user_key].clear()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result_text = [
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in confirm delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data == "cancel_delete_selected")
async def handle_cancel_delete_selected(callback: CallbackQuery):
    """Handle cancellation of selected screenshots deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        await update_screenshot_message(callback.message, user_id, chat_id)
        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Error in cancel delete selected: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def register_handlers(dp: Dispatcher):
    """Register all handlers"""
    logger.info("Starting handlers registration")
    try:
        dp.include_router(router)
        logger.info("Successfully registered main router")
    except Exception as e:
        logger.error(f"Error registering handlers: {e}", exc_info=True)
        raise

@router.callback_query(F.data.startswith("select_"))
async def handle_screenshot_selection(callback: CallbackQuery):
    """Handle screenshot selection for multiple deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        filename = callback.data.replace("select_", "")
        user_key = f"user_{user_id}"
        
        logger.info(f"[SELECTION] Processing selection for file: {filename}")
        logger.info(f"[SELECTION] User key: {user_key}")
        logger.info(f"[SELECTION] Current selected files: {selected_screenshots[user_key]}")

        if filename in selected_screenshots[user_key]:
            selected_screenshots[user_key].remove(filename)
            logger.info(f"[SELECTION] Removed {filename} from selection")
            await callback.answer("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç —É–±—Ä–∞–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            selected_screenshots[user_key].add(filename)
            logger.info(f"[SELECTION] Added {filename} to selection")
            await callback.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await update_screenshot_message(callback.message, user_id, chat_id)

    except Exception as e:
        logger.error(f"[SELECTION] Error in screenshot selection: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def update_screenshot_message(message: Message, user_id: int, chat_id: int):
    """Update message with selected screenshots"""
    try:
        logger.info("[UPDATE_MESSAGE] Starting message update")
        user_key = f"user_{user_id}"
        
        if not message or not message.text:
            logger.error("[UPDATE_MESSAGE] Message or message text is None")
            return

        current_label = None
        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in message.text:
            current_label = message.text.split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[1].split("\n")[0].strip()
            logger.info(f"[UPDATE_MESSAGE] Found category: {current_label}")
            screenshots = screenshot_storage.get_screenshots_by_label(current_label, user_id, chat_id)
            logger.info(f"[UPDATE_MESSAGE] Found {len(screenshots)} screenshots")
        else:
            logger.error("[UPDATE_MESSAGE] Cannot find category in message text")
            return

        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if selected_screenshots[user_key]:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({len(selected_screenshots[user_key])})",
                    callback_data="delete_selected"
                )
            ])
            logger.info(f"[UPDATE_MESSAGE] Added delete selected button for {len(selected_screenshots[user_key])} files")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ ({len(screenshots)})",
                callback_data=f"delete_category_{current_label}"
            )
        ])
        logger.info(f"[UPDATE_MESSAGE] Added delete all button for {len(screenshots)} files")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        for screenshot in screenshots:
            filename = os.path.basename(screenshot['filepath'])
            is_selected = filename in selected_screenshots[user_key]
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{screenshot['timestamp']} {'‚úÖ' if is_selected else ''}",
                    callback_data=f"select_{filename}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
        ])

        logger.info("[UPDATE_MESSAGE] Updating message with new keyboard")
        await message.edit_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_label}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        logger.info("[UPDATE_MESSAGE] Message updated successfully")

    except Exception as e:
        logger.error(f"[UPDATE_MESSAGE] Error updating screenshot message: {e}", exc_info=True)

@router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """Handle deletion of all screenshots in a category"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("delete_category_", "")
        
        logger.info(f"[DELETE_CATEGORY] Starting deletion process for category '{label}'")
        logger.info(f"[DELETE_CATEGORY] User ID: {user_id}, Chat ID: {chat_id}")
        
        # Get all screenshots in the category
        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
        logger.info(f"[DELETE_CATEGORY] Found {len(screenshots)} screenshots to delete")
        
        for screenshot in screenshots:
            logger.info(f"[DELETE_CATEGORY] Found screenshot: {screenshot['filepath']} with label: {screenshot['label']}")

        if not screenshots:
            logger.warning(f"[DELETE_CATEGORY] No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # Request confirmation
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_delete_category_{label}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"label_{label}"
                )
            ]
        ]

        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{label}\"?\n"
            f"–í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)}\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"[DELETE_CATEGORY] Error in delete category handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[DELETE_CATEGORY] Error returning to archive: {e2}", exc_info=True)

@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete_category(callback: CallbackQuery):
    """Handle confirmation of category deletion"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        label = callback.data.replace("confirm_delete_category_", "")

        logger.info(f"[CONFIRM_DELETE] Starting deletion of category '{label}' for user {user_id} in chat {chat_id}")

        screenshots = screenshot_storage.get_screenshots_by_label(label, user_id, chat_id)
        logger.info(f"[CONFIRM_DELETE] Found {len(screenshots)} screenshots to delete")
        for screenshot in screenshots:
            logger.info(f"[CONFIRM_DELETE] Will delete: {screenshot['filepath']} with label: {screenshot['label']}")

        if not screenshots:
            logger.warning(f"[CONFIRM_DELETE] No screenshots found in category '{label}'")
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await handle_view_archive(callback)
            return

        # Show deletion status
        status_message = await callback.message.edit_text(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(screenshots)}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        deleted_count = 0
        failed_count = 0
        failed_files = []

        for screenshot in screenshots:
            try:
                # Use only the filename from the full path
                filename = os.path.basename(screenshot["filepath"])
                logger.info(f"[CONFIRM_DELETE] Attempting to delete: {filename}")

                if screenshot_storage.delete_screenshot(filename, user_id, chat_id):
                    deleted_count += 1
                    logger.info(f"[CONFIRM_DELETE] Successfully deleted: {filename}")
                else:
                    failed_count += 1
                    failed_files.append(filename)
                    logger.error(f"[CONFIRM_DELETE] Failed to delete: {filename}")

                # Update status every 5 files
                if (deleted_count + failed_count) % 5 == 0:
                    await status_message.edit_text(
                        "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {deleted_count + failed_count} –∏–∑ {len(screenshots)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {deleted_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    )

            except Exception as e:
                failed_count += 1
                if 'filename' in locals():
                    failed_files.append(filename)
                logger.error(f"[CONFIRM_DELETE] Error deleting file: {e}", exc_info=True)

        # Generate report
        result_text = [
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
        ]

        if failed_files:
            result_text.append("\n–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for file in failed_files[:5]:
                result_text.append(f"- {file}")
            if len(failed_files) > 5:
                result_text.append(f"...–∏ –µ—â–µ {len(failed_files) - 5} —Ñ–∞–π–ª–æ–≤")

        keyboard = [
            [InlineKeyboardButton(text="üîô –ö –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")]
        ]

        await status_message.edit_text(
            "\n".join(result_text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        logger.info(f"[CONFIRM_DELETE] Category deletion completed. Success: {deleted_count}, Failed: {failed_count}")

    except Exception as e:
        logger.error(f"[CONFIRM_DELETE] Error in confirm delete category: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        try:
            await handle_view_archive(callback)
        except Exception as e2:
            logger.error(f"[CONFIRM_DELETE] Error returning to archive: {e2}", exc_info=True)